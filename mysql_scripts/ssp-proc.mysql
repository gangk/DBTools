drop procedure CANVAS_EDGES_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CANVAS_EDGES_MERGER_PROC`(IN I_EDGE_ID VARCHAR(40), IN I_LAYOUT_ID VARCHAR(40), IN I_CLIENT_ID VARCHAR(40), IN I_EDGE_TYPE VARCHAR(30), IN I_WEIGHT INTEGER, IN I_ACTIVE_STATUS VARCHAR(10), IN I_DEST_VERTEX_ID VARCHAR(40), IN I_DEST_PHYSICAL_ID VARCHAR(40), IN I_DEST_VERTEX_TYPE VARCHAR(45), IN I_DEST_VERTEX_LABEL VARCHAR(256), IN I_SRC_VERTEX_ID VARCHAR(40),IN I_SRC_PHYSICAL_ID VARCHAR(40), IN I_SRC_VERTEX_TYPE VARCHAR(45), IN I_SRC_VERTEX_LABEL VARCHAR(256), IN I_CREATION_DATE DATETIME(6), IN I_LAST_UPDATED_DATE DATETIME(6), IN I_DELETION_DATE DATETIME(6), IN I_LAST_UPDATED_BY VARCHAR(8), IN I_CREATED_BY VARCHAR(8))
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
    UPDATE CANVAS_EDGES SET LAYOUT_ID = I_LAYOUT_ID, CLIENT_ID = I_CLIENT_ID, EDGE_TYPE = I_EDGE_TYPE, WEIGHT = I_WEIGHT, ACTIVE_STATUS = I_ACTIVE_STATUS, DEST_VERTEX_ID = I_DEST_VERTEX_ID, DEST_PHYSICAL_ID = I_DEST_PHYSICAL_ID, DEST_VERTEX_TYPE = I_DEST_VERTEX_TYPE, DEST_VERTEX_LABEL = I_DEST_VERTEX_LABEL, SRC_VERTEX_ID = I_SRC_VERTEX_ID, SRC_PHYSICAL_ID = I_SRC_PHYSICAL_ID, SRC_VERTEX_TYPE = I_SRC_VERTEX_TYPE , SRC_VERTEX_LABEL = I_SRC_VERTEX_LABEL, CREATION_DATE = I_CREATION_DATE, LAST_UPDATED_DATE = I_LAST_UPDATED_DATE, DELETION_DATE = I_DELETION_DATE, LAST_UPDATED_BY = I_LAST_UPDATED_BY, CREATED_BY = I_CREATED_BY WHERE EDGE_ID = I_EDGE_ID and binary EDGE_ID = I_EDGE_ID;
    IF (ROW_COUNT()=0) then
        INSERT INTO CANVAS_EDGES (EDGE_ID, LAYOUT_ID, CLIENT_ID, EDGE_TYPE, WEIGHT, ACTIVE_STATUS, DEST_VERTEX_ID, DEST_PHYSICAL_ID, DEST_VERTEX_TYPE, DEST_VERTEX_LABEL, SRC_VERTEX_ID, SRC_PHYSICAL_ID, SRC_VERTEX_TYPE, SRC_VERTEX_LABEL, CREATION_DATE, LAST_UPDATED_DATE, DELETION_DATE, LAST_UPDATED_BY, CREATED_BY ) SELECT I_EDGE_ID, I_LAYOUT_ID, I_CLIENT_ID, I_EDGE_TYPE, I_WEIGHT, I_ACTIVE_STATUS, I_DEST_VERTEX_ID, I_DEST_PHYSICAL_ID, I_DEST_VERTEX_TYPE, I_DEST_VERTEX_LABEL, I_SRC_VERTEX_ID, I_SRC_PHYSICAL_ID, I_SRC_VERTEX_TYPE, I_SRC_VERTEX_LABEL, I_CREATION_DATE, I_LAST_UPDATED_DATE, I_DELETION_DATE, I_LAST_UPDATED_BY, I_CREATED_BY  FROM dual WHERE NOT EXISTS (SELECT CREATION_DATE FROM CANVAS_EDGES WHERE EDGE_ID = I_EDGE_ID and binary EDGE_ID = I_EDGE_ID);
    END IF;
    END//

drop procedure CANVAS_VERTICES_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CANVAS_VERTICES_MERGER_PROC`(IN I_VERTEX_ID VARCHAR(40), IN I_PHYSICAL_ID VARCHAR(40), IN I_LAYOUT_ID VARCHAR(40), IN I_CLIENT_ID VARCHAR(40), IN I_VERTEX_TYPE VARCHAR(45), IN I_VERTEX_LABEL VARCHAR(256), IN I_ACTIVE_STATUS VARCHAR(10),   IN I_CREATION_DATE DATETIME(6), IN I_CREATED_BY VARCHAR(8), IN I_LAST_UPDATED_BY VARCHAR(8), IN I_LAST_UPDATED_DATE DATETIME(6))
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
    UPDATE CANVAS_VERTICES SET LAYOUT_ID = I_LAYOUT_ID, CLIENT_ID = I_CLIENT_ID, ACTIVE_STATUS = I_ACTIVE_STATUS, PHYSICAL_ID = I_PHYSICAL_ID, VERTEX_TYPE= I_VERTEX_TYPE, VERTEX_LABEL = I_VERTEX_LABEL, CREATION_DATE = I_CREATION_DATE, LAST_UPDATED_DATE = I_LAST_UPDATED_DATE, LAST_UPDATED_BY = I_LAST_UPDATED_BY, CREATED_BY = I_CREATED_BY WHERE VERTEX_ID = I_VERTEX_ID and binary VERTEX_ID = I_VERTEX_ID;
    IF (ROW_COUNT() = 0) then
        INSERT INTO CANVAS_VERTICES (VERTEX_ID, LAYOUT_ID, CLIENT_ID, ACTIVE_STATUS, PHYSICAL_ID, VERTEX_TYPE, VERTEX_LABEL, CREATION_DATE, LAST_UPDATED_DATE, LAST_UPDATED_BY, CREATED_BY ) SELECT I_VERTEX_ID, I_LAYOUT_ID, I_CLIENT_ID, I_ACTIVE_STATUS, I_PHYSICAL_ID, I_VERTEX_TYPE, I_VERTEX_LABEL, I_CREATION_DATE, I_LAST_UPDATED_DATE, I_LAST_UPDATED_BY, I_CREATED_BY  FROM dual WHERE NOT EXISTS (SELECT creation_date FROM CANVAS_VERTICES WHERE VERTEX_ID = I_VERTEX_ID and binary VERTEX_ID = I_VERTEX_ID);
    END IF;
END//

drop procedure CONTAINER_ARRIVED_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_ARRIVED_MERGER_PROC`(IN i_container_id varchar(48), IN i_container_status varchar(48), IN i_actual_inbound_load_id varchar(48), IN i_actual_inbound_plan_id varchar(256), IN i_node_id varchar(48), IN i_actual_unloaded_time datetime, IN i_actual_unloaded_time_local_tz datetime, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE CONTAINER_HISTORY_DATA SET container_status='ARRIVED', actual_inbound_load_id=i_actual_inbound_load_id, actual_inbound_plan_id=i_actual_inbound_plan_id, node_id=i_node_id, actual_unloaded_time= i_actual_unloaded_time, actual_unloaded_time_local_tz=i_actual_unloaded_time_local_tz, last_updated_by = i_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID;
IF (ROW_COUNT()=0) then
    INSERT INTO CONTAINER_HISTORY_DATA (container_id, container_status, actual_inbound_load_id, actual_inbound_plan_id, node_id, actual_unloaded_time, actual_unloaded_time_local_tz, created_by, last_updated_by) SELECT i_container_id, i_container_status, i_actual_inbound_load_id, i_actual_inbound_plan_id, i_node_id, i_actual_unloaded_time, i_actual_unloaded_time_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM CONTAINER_HISTORY_DATA WHERE container_id = i_container_id);
END IF;
END//

drop procedure CONTAINER_AUTO_SORTED_MERGE_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_AUTO_SORTED_MERGE_PROC`(IN i_CONTAINER_ID varchar(48), IN i_NODE_ID varchar(48), IN i_AUTO_SORTER_ID varchar(256), IN i_AUTO_SORTER_DIVERT_TIME datetime, IN i_AUTO_SORTER_DIVERT_LOCAL_TZ datetime, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE CONTAINER_HISTORY_DATA SET NODE_ID = i_NODE_ID, AUTO_SORTER_ID = i_AUTO_SORTER_ID , AUTO_SORTER_DIVERT_TIME = i_AUTO_SORTER_DIVERT_TIME, AUTO_SORTER_DIVERT_LOCAL_TZ = i_AUTO_SORTER_DIVERT_LOCAL_TZ, last_updated_by = i_last_updated_by WHERE container_id = i_CONTAINER_ID AND (AUTO_SORTER_DIVERT_TIME IS NULL OR AUTO_SORTER_DIVERT_TIME < i_AUTO_SORTER_DIVERT_TIME);
IF (ROW_COUNT()=0) then
    INSERT INTO CONTAINER_HISTORY_DATA (CONTAINER_ID, NODE_ID, AUTO_SORTER_ID, AUTO_SORTER_DIVERT_TIME, AUTO_SORTER_DIVERT_LOCAL_TZ, created_by, last_updated_by) SELECT i_CONTAINER_ID, i_NODE_ID, i_AUTO_SORTER_ID, i_AUTO_SORTER_DIVERT_TIME, i_AUTO_SORTER_DIVERT_LOCAL_TZ, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM CONTAINER_HISTORY_DATA WHERE container_id = i_container_id);
END IF;
END//

drop procedure CONTAINER_CLOSED_MERGE_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_CLOSED_MERGE_PROC`(IN I_CONTAINER_ID VARCHAR(48), IN I_NODE_ID VARCHAR(48), IN I_CLOSED_BY VARCHAR(256), IN I_CLOSE_TIME DATETIME, IN I_CLOSE_TIME_LOCAL_TZ DATETIME, IN I_created_by VARCHAR(8), IN I_last_updated_by VARCHAR(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
UPDATE CONTAINER_HISTORY_DATA SET NODE_ID = I_NODE_ID, CLOSED_BY = I_CLOSED_BY, CLOSE_TIME = I_CLOSE_TIME, CLOSE_TIME_LOCAL_TZ = I_CLOSE_TIME_LOCAL_TZ, last_updated_by = I_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID AND (CLOSE_TIME IS NULL OR CLOSE_TIME < I_CLOSE_TIME);
IF (ROW_COUNT()=0) THEN
    INSERT INTO CONTAINER_HISTORY_DATA (CONTAINER_ID, NODE_ID, CLOSED_BY, CLOSE_TIME, CLOSE_TIME_LOCAL_TZ, created_by, last_updated_by) SELECT I_CONTAINER_ID, I_NODE_ID, I_CLOSED_BY, I_CLOSE_TIME, I_CLOSE_TIME_LOCAL_TZ, I_created_by, I_last_updated_by FROM DUAL WHERE NOT EXISTS (SELECT CREATION_DATE FROM CONTAINER_HISTORY_DATA WHERE CONTAINER_ID = I_CONTAINER_ID);
END IF;
END//

drop procedure CONTAINER_DEPARTED_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_DEPARTED_MERGER_PROC`(IN i_container_id varchar(48),IN i_container_status varchar(48),IN i_actual_outbound_load_id varchar(48),IN i_actual_outbound_plan_id  varchar(256),IN i_node_id varchar(48),IN i_departed_trailer_id varchar(48),IN i_actual_loaded_time datetime,IN i_actual_loaded_time_local_tz datetime,IN i_scannables varchar(4000),IN i_client_container_id varchar(48),IN i_created_by varchar(8),IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE CONTAINER_HISTORY_DATA SET container_status=i_container_status, actual_outbound_load_id=i_actual_outbound_load_id, actual_outbound_plan_id=i_actual_outbound_plan_id, node_id=i_node_id, departed_trailer_id=i_departed_trailer_id, actual_loaded_time=i_actual_loaded_time, actual_loaded_time_local_tz=i_actual_loaded_time_local_tz, client_container_id=i_client_container_id, last_updated_by = i_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID;
IF (ROW_COUNT()=0) then
    INSERT INTO CONTAINER_HISTORY_DATA (container_id, container_status, actual_outbound_load_id, actual_outbound_plan_id , node_id, departed_trailer_id, actual_loaded_time, actual_loaded_time_local_tz, scannables, client_container_id, created_by, last_updated_by) SELECT i_container_id, i_container_status, i_actual_outbound_load_id, i_actual_outbound_plan_id , i_node_id, i_departed_trailer_id, i_actual_loaded_time, i_actual_loaded_time_local_tz, i_scannables, i_client_container_id, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM CONTAINER_HISTORY_DATA WHERE container_id = i_container_id);
END IF;
END//

drop procedure CONTAINER_LABEL_PRINTED_MERGE_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_LABEL_PRINTED_MERGE_PROC`(IN I_CONTAINER_ID VARCHAR(48), IN I_NODE_ID VARCHAR(48), IN I_PRINTED_BY VARCHAR(256), IN I_PRINT_TIME DATETIME, IN I_PRINT_TIME_LOCAL_TZ DATETIME, IN I_created_by VARCHAR(8), IN I_last_updated_by VARCHAR(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
UPDATE CONTAINER_HISTORY_DATA SET NODE_ID = I_NODE_ID, PRINTED_BY = I_PRINTED_BY, PRINT_TIME = I_PRINT_TIME, PRINT_TIME_LOCAL_TZ = I_PRINT_TIME_LOCAL_TZ, last_updated_by = I_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID AND (PRINT_TIME IS NULL OR PRINT_TIME < I_PRINT_TIME);
IF (ROW_COUNT()=0) THEN
    INSERT INTO CONTAINER_HISTORY_DATA (CONTAINER_ID, NODE_ID, PRINTED_BY, PRINT_TIME, PRINT_TIME_LOCAL_TZ, created_by, last_updated_by) SELECT I_CONTAINER_ID, I_NODE_ID, I_PRINTED_BY, I_PRINT_TIME, I_PRINT_TIME_LOCAL_TZ, I_created_by, I_last_updated_by FROM DUAL WHERE NOT EXISTS (SELECT CREATION_DATE FROM CONTAINER_HISTORY_DATA WHERE CONTAINER_ID = I_CONTAINER_ID);
END IF;
END//

drop procedure CONTAINER_MOVED_MERGE_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_MOVED_MERGE_PROC`(IN I_CONTAINER_ID VARCHAR(48), IN I_NODE_ID VARCHAR(48), IN I_PARENT_CONTAINER_ID VARCHAR(256), IN I_PARENT_CONTAINER_LABEL VARCHAR(256), IN I_PARENT_CONTAINER_TYPE VARCHAR(256), IN I_PARENT_CONTAINER_MOVE_TIME DATETIME, IN I_PARENT_CONTAINER_MOVE_LOCAL_TZ DATETIME, IN I_CREATED_BY VARCHAR(8), IN I_LAST_UPDATED_BY VARCHAR(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
UPDATE CONTAINER_HISTORY_DATA SET NODE_ID = I_NODE_ID ,PARENT_CONTAINER_ID = I_PARENT_CONTAINER_ID , PARENT_CONTAINER_LABEL = I_PARENT_CONTAINER_LABEL , PARENT_CONTAINER_TYPE = I_PARENT_CONTAINER_TYPE , PARENT_CONTAINER_MOVE_TIME = I_PARENT_CONTAINER_MOVE_TIME , PARENT_CONTAINER_MOVE_LOCAL_TZ = I_PARENT_CONTAINER_MOVE_LOCAL_TZ, last_updated_by = I_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID AND (PARENT_CONTAINER_MOVE_TIME IS NULL OR PARENT_CONTAINER_MOVE_TIME < I_PARENT_CONTAINER_MOVE_TIME);
IF (ROW_COUNT()=0) THEN
    INSERT INTO CONTAINER_HISTORY_DATA (CONTAINER_ID, NODE_ID, PARENT_CONTAINER_ID, PARENT_CONTAINER_LABEL, PARENT_CONTAINER_TYPE, PARENT_CONTAINER_MOVE_TIME, PARENT_CONTAINER_MOVE_LOCAL_TZ, CREATED_BY, LAST_UPDATED_BY) SELECT I_CONTAINER_ID, I_NODE_ID, I_PARENT_CONTAINER_ID, I_PARENT_CONTAINER_LABEL, I_PARENT_CONTAINER_TYPE, I_PARENT_CONTAINER_MOVE_TIME, I_PARENT_CONTAINER_MOVE_LOCAL_TZ, I_CREATED_BY, I_LAST_UPDATED_BY FROM DUAL WHERE NOT EXISTS (SELECT CREATION_DATE FROM CONTAINER_HISTORY_DATA WHERE CONTAINER_ID = I_CONTAINER_ID);
END IF;
END//

drop procedure CONTAINER_PLANNED_MERGE_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_PLANNED_MERGE_PROC`(IN i_container_id varchar(48), IN i_node_id varchar(48), IN i_expected_inbound_load_id varchar(48), IN i_expected_inbound_plan_id varchar(256), IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE CONTAINER_HISTORY_DATA SET node_id=i_node_id,expected_inbound_load_id=i_expected_inbound_load_id,expected_inbound_plan_id=i_expected_inbound_plan_id, last_updated_by = i_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID;
IF (ROW_COUNT()=0) then
    INSERT INTO CONTAINER_HISTORY_DATA (container_id,node_id,expected_inbound_load_id,expected_inbound_plan_id, created_by, last_updated_by) SELECT i_container_id, i_node_id, i_expected_inbound_load_id, i_expected_inbound_plan_id, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM CONTAINER_HISTORY_DATA WHERE container_id = i_container_id);
END IF;
END//

drop procedure CONTAINER_STACKED_MERGE_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_STACKED_MERGE_PROC`(IN I_CONTAINER_ID VARCHAR(48), IN I_NODE_ID VARCHAR(48), IN I_STACKING_LOCATION VARCHAR(256), IN I_STACKING_TIME DATETIME, IN I_STACKING_TIME_LOCAL_TZ DATETIME, IN I_created_by VARCHAR(8), IN I_last_updated_by VARCHAR(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
UPDATE CONTAINER_HISTORY_DATA SET NODE_ID = I_NODE_ID, STACKING_LOCATION = I_STACKING_LOCATION, STACKING_TIME = I_STACKING_TIME, STACKING_TIME_LOCAL_TZ = I_STACKING_TIME_LOCAL_TZ, last_updated_by = I_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID AND (STACKING_TIME IS NULL OR STACKING_TIME < I_STACKING_TIME);
IF (ROW_COUNT()=0) THEN
    INSERT INTO CONTAINER_HISTORY_DATA (CONTAINER_ID, NODE_ID, STACKING_LOCATION, STACKING_TIME, STACKING_TIME_LOCAL_TZ, created_by, last_updated_by) SELECT I_CONTAINER_ID, I_NODE_ID, I_STACKING_LOCATION, I_STACKING_TIME, I_STACKING_TIME_LOCAL_TZ, I_created_by, I_last_updated_by FROM DUAL WHERE NOT EXISTS (SELECT CREATION_DATE FROM CONTAINER_HISTORY_DATA WHERE CONTAINER_ID = I_CONTAINER_ID);
END IF;
END//

drop procedure CONTAINER_STAGED_MERGE_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `CONTAINER_STAGED_MERGE_PROC`(IN I_CONTAINER_ID VARCHAR(48), IN I_NODE_ID VARCHAR(48), IN I_STAGING_LOCATION VARCHAR(256), IN I_STAGING_TIME DATETIME, IN I_STAGING_TIME_LOCAL_TZ DATETIME, IN I_created_by VARCHAR(8), IN I_last_updated_by VARCHAR(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
UPDATE CONTAINER_HISTORY_DATA SET NODE_ID = I_NODE_ID, STAGING_LOCATION = I_STAGING_LOCATION, STAGING_TIME = I_STAGING_TIME, STAGING_TIME_LOCAL_TZ = I_STAGING_TIME_LOCAL_TZ, last_updated_by = I_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID AND (STAGING_TIME IS NULL OR STAGING_TIME < I_STAGING_TIME);
IF (ROW_COUNT()=0) THEN
    INSERT INTO CONTAINER_HISTORY_DATA (CONTAINER_ID, NODE_ID, STAGING_LOCATION, STAGING_TIME, STAGING_TIME_LOCAL_TZ, created_by, last_updated_by) SELECT I_CONTAINER_ID, I_NODE_ID, I_STAGING_LOCATION, I_STAGING_TIME, I_STAGING_TIME_LOCAL_TZ, I_created_by, I_last_updated_by FROM DUAL WHERE NOT EXISTS (SELECT CREATION_DATE FROM CONTAINER_HISTORY_DATA WHERE CONTAINER_ID = I_CONTAINER_ID);
END IF;
END//

drop procedure GET_ALL_PACKAGES_BY_LANE_AND_CPT;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_ALL_PACKAGES_BY_LANE_AND_CPT`(IN l_lane VARCHAR(4000), IN cptStartTime VARCHAR(19), IN cptEndTime VARCHAR(19), IN nodeId VARCHAR(48))
BEGIN
select tab1.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, tab1.LANE, tab1.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(tab1.ACTUAL_LOADED_TIME <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(tab1.actual_unloaded_time <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, tab1.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, tab1.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, tab1.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select load_group_id, LANE, CRITICAL_PULL_TIME, CRITICAL_PULL_TIME_LOCAL_TZ, CLIENT_CONTAINER_ID, ACTUAL_LOADED_TIME, actual_unloaded_time, actual_unloaded_time_local_tz, ACTUAL_LOADED_TIME_LOCAL_TZ, ACTUAL_OUTBOUND_PLAN_ID, actual_inbound_plan_id, DEPARTED_TRAILER_ID from LOAD_GROUPS_DATA lgd, CONTAINER_HISTORY_DATA chd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and FIND_IN_SET(LANE, l_lane) and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE')) tab1 left outer join LOADS_REPORT_DATA LRD_OB on LRD_OB.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON tab1.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary tab1.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on tab1.actual_inbound_plan_id = LRD_IB.PLAN_ID;
END//

drop procedure GET_ALL_PACKAGES_BY_VRID;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_ALL_PACKAGES_BY_VRID`(IN vrid VARCHAR(256), IN nodeId VARCHAR(48))
BEGIN
select CHD.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, LGD.LANE, LGD.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(CHD.ACTUAL_LOADED_TIME <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(CHD.actual_unloaded_time <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, CHD.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, CHD.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, CHD.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select NODE_ID, CARRIER, VEHICLE_RUN_ID, PLAN_ID, SCHEDULED_DEPARTURE_LOCAL_TZ from LOADS_REPORT_DATA where VEHICLE_RUN_ID = vrid and NODE_ID = nodeId and BUSINESS_TYPE = 'OUTBOUND') LRD_OB
join CONTAINER_HISTORY_DATA CHD on LRD_OB.PLAN_ID = CHD.ACTUAL_OUTBOUND_PLAN_ID join LOAD_GROUPS_DATA LGD ON CHD.EXPECTED_LOAD_GROUP_ID = LGD.LOAD_GROUP_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON CHD.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary CHD.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on CHD.actual_inbound_plan_id = LRD_IB.PLAN_ID WHERE CHD.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') AND CHD.NODE_ID = nodeId;
END//

drop procedure GET_MET_CET_PACKAGES_BY_LANE_AND_CPT;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MET_CET_PACKAGES_BY_LANE_AND_CPT`(IN l_lane VARCHAR(4000), IN cptStartTime VARCHAR(19), IN cptEndTime VARCHAR(19), IN nodeId VARCHAR(48))
BEGIN
select tab1.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, tab1.LANE, tab1.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(tab1.ACTUAL_LOADED_TIME <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(tab1.actual_unloaded_time <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, tab1.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, tab1.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, tab1.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select load_group_id, LANE, CRITICAL_PULL_TIME, CRITICAL_PULL_TIME_LOCAL_TZ, CLIENT_CONTAINER_ID, ACTUAL_LOADED_TIME, actual_unloaded_time, actual_unloaded_time_local_tz, ACTUAL_LOADED_TIME_LOCAL_TZ, ACTUAL_OUTBOUND_PLAN_ID, actual_inbound_plan_id, DEPARTED_TRAILER_ID from LOAD_GROUPS_DATA lgd, CONTAINER_HISTORY_DATA chd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and FIND_IN_SET(LANE, l_lane) and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.ACTUAL_UNLOADED_TIME <= lgd.CRITICAL_PULL_TIME or (chd.ACTUAL_LOADED_TIME is not null and lgd.CRITICAL_PULL_TIME is null))) tab1 left outer join LOADS_REPORT_DATA LRD_OB on LRD_OB.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON tab1.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary tab1.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on tab1.actual_inbound_plan_id = LRD_IB.PLAN_ID;
END//

drop procedure GET_MET_CET_PACKAGES_BY_VRID;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MET_CET_PACKAGES_BY_VRID`(IN vrid VARCHAR(256), IN nodeId VARCHAR(48))
BEGIN
select CHD.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, LGD.LANE, LGD.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(CHD.ACTUAL_LOADED_TIME <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(CHD.actual_unloaded_time <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, CHD.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, CHD.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, CHD.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select NODE_ID, CARRIER, VEHICLE_RUN_ID, PLAN_ID, SCHEDULED_DEPARTURE_LOCAL_TZ from LOADS_REPORT_DATA where VEHICLE_RUN_ID = vrid and NODE_ID = nodeId and BUSINESS_TYPE = 'OUTBOUND') LRD_OB
join CONTAINER_HISTORY_DATA CHD on LRD_OB.PLAN_ID = CHD.ACTUAL_OUTBOUND_PLAN_ID join LOAD_GROUPS_DATA LGD ON CHD.EXPECTED_LOAD_GROUP_ID = LGD.LOAD_GROUP_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON CHD.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary CHD.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on CHD.actual_inbound_plan_id = LRD_IB.PLAN_ID WHERE CHD.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') AND CHD.NODE_ID = nodeId and (CHD.actual_unloaded_time <= LGD.CRITICAL_PULL_TIME or (CHD.ACTUAL_LOADED_TIME is not null and LGD.CRITICAL_PULL_TIME is null));
END//

drop procedure GET_MET_CPT_PACKAGES_BY_LANE_AND_CPT; 

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MET_CPT_PACKAGES_BY_LANE_AND_CPT`(IN l_lane VARCHAR(4000), IN cptStartTime VARCHAR(19), IN cptEndTime VARCHAR(19), IN nodeId VARCHAR(48))
BEGIN
select tab1.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, tab1.LANE, tab1.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(tab1.ACTUAL_LOADED_TIME <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(tab1.actual_unloaded_time <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, tab1.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, tab1.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, tab1.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select load_group_id, LANE, CRITICAL_PULL_TIME, CRITICAL_PULL_TIME_LOCAL_TZ, CLIENT_CONTAINER_ID, ACTUAL_LOADED_TIME, actual_unloaded_time, actual_unloaded_time_local_tz, ACTUAL_LOADED_TIME_LOCAL_TZ, ACTUAL_OUTBOUND_PLAN_ID, actual_inbound_plan_id, DEPARTED_TRAILER_ID from LOAD_GROUPS_DATA lgd, CONTAINER_HISTORY_DATA chd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and FIND_IN_SET(LANE, l_lane) and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.ACTUAL_LOADED_TIME <= lgd.CRITICAL_PULL_TIME or (chd.ACTUAL_LOADED_TIME is not null and lgd.CRITICAL_PULL_TIME is null))) tab1 left outer join LOADS_REPORT_DATA LRD_OB on LRD_OB.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON tab1.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary tab1.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on tab1.actual_inbound_plan_id = LRD_IB.PLAN_ID;
END//

drop procedure GET_MET_CPT_PACKAGES_BY_VRID;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MET_CPT_PACKAGES_BY_VRID`(IN vrid VARCHAR(256), IN nodeId VARCHAR(48))
BEGIN
select CHD.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, LGD.LANE, LGD.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(CHD.ACTUAL_LOADED_TIME <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(CHD.actual_unloaded_time <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, CHD.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, CHD.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, CHD.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select NODE_ID, CARRIER, VEHICLE_RUN_ID, PLAN_ID, SCHEDULED_DEPARTURE_LOCAL_TZ from LOADS_REPORT_DATA where VEHICLE_RUN_ID = vrid and NODE_ID = nodeId and BUSINESS_TYPE = 'OUTBOUND') LRD_OB
join CONTAINER_HISTORY_DATA CHD on LRD_OB.PLAN_ID = CHD.ACTUAL_OUTBOUND_PLAN_ID join LOAD_GROUPS_DATA LGD ON CHD.EXPECTED_LOAD_GROUP_ID = LGD.LOAD_GROUP_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON CHD.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary CHD.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on CHD.actual_inbound_plan_id = LRD_IB.PLAN_ID WHERE CHD.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') AND CHD.NODE_ID = nodeId and (CHD.ACTUAL_LOADED_TIME <= LGD.CRITICAL_PULL_TIME or (CHD.ACTUAL_LOADED_TIME is not null and LGD.CRITICAL_PULL_TIME is null));
END//

drop procedure GET_MISSED_CET_PACKAGES_BY_LANE_AND_CPT; 

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MISSED_CET_PACKAGES_BY_LANE_AND_CPT`(IN l_lane VARCHAR(4000), IN cptStartTime VARCHAR(19), IN cptEndTime VARCHAR(19), IN l_nodeId VARCHAR(48))
BEGIN
select tab1.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, tab1.LANE, tab1.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(tab1.ACTUAL_LOADED_TIME <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(tab1.actual_unloaded_time <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, tab1.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, tab1.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, tab1.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select load_group_id, LANE, CRITICAL_PULL_TIME, CRITICAL_PULL_TIME_LOCAL_TZ, CLIENT_CONTAINER_ID, ACTUAL_LOADED_TIME, actual_unloaded_time, actual_unloaded_time_local_tz, ACTUAL_LOADED_TIME_LOCAL_TZ, ACTUAL_OUTBOUND_PLAN_ID, actual_inbound_plan_id, DEPARTED_TRAILER_ID from LOAD_GROUPS_DATA lgd, CONTAINER_HISTORY_DATA chd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and FIND_IN_SET(LANE, l_lane) and lgd.node_id = l_nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.ACTUAL_UNLOADED_TIME > lgd.CRITICAL_PULL_TIME OR chd.actual_unloaded_time is null)) tab1 left outer join LOADS_REPORT_DATA LRD_OB on LRD_OB.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON tab1.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary tab1.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on tab1.actual_inbound_plan_id = LRD_IB.PLAN_ID;
END//

drop procedure GET_MISSED_CET_PACKAGES_BY_VRID;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MISSED_CET_PACKAGES_BY_VRID`(IN vrid VARCHAR(256), IN nodeId VARCHAR(48))
BEGIN
select CHD.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, LGD.LANE, LGD.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(CHD.ACTUAL_LOADED_TIME <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(CHD.actual_unloaded_time <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, CHD.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, CHD.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, CHD.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select NODE_ID, CARRIER, VEHICLE_RUN_ID, PLAN_ID, SCHEDULED_DEPARTURE_LOCAL_TZ from LOADS_REPORT_DATA where VEHICLE_RUN_ID = vrid and NODE_ID = nodeId and BUSINESS_TYPE = 'OUTBOUND') LRD_OB
join CONTAINER_HISTORY_DATA CHD on LRD_OB.PLAN_ID = CHD.ACTUAL_OUTBOUND_PLAN_ID join LOAD_GROUPS_DATA LGD ON CHD.EXPECTED_LOAD_GROUP_ID = LGD.LOAD_GROUP_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON CHD.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary CHD.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on CHD.actual_inbound_plan_id = LRD_IB.PLAN_ID WHERE CHD.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') AND CHD.NODE_ID = nodeId and (CHD.actual_unloaded_time > LGD.CRITICAL_PULL_TIME OR CHD.actual_unloaded_time is null);
END//

drop procedure GET_MISSED_CPT_PACKAGES_BY_LANE_AND_CPT;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MISSED_CPT_PACKAGES_BY_LANE_AND_CPT`(IN l_lane VARCHAR(4000), IN l_cptStartTime VARCHAR(19), IN l_cptEndTime VARCHAR(19), IN l_nodeId VARCHAR(48))
BEGIN
select tab1.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, tab1.LANE, tab1.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(tab1.ACTUAL_LOADED_TIME <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(tab1.actual_unloaded_time <= tab1.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, tab1.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME, LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, tab1.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, tab1.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select load_group_id, LANE, CRITICAL_PULL_TIME, CRITICAL_PULL_TIME_LOCAL_TZ, CLIENT_CONTAINER_ID, ACTUAL_LOADED_TIME, actual_unloaded_time, actual_unloaded_time_local_tz, ACTUAL_LOADED_TIME_LOCAL_TZ, ACTUAL_OUTBOUND_PLAN_ID, actual_inbound_plan_id, DEPARTED_TRAILER_ID from LOAD_GROUPS_DATA lgd, CONTAINER_HISTORY_DATA chd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(l_cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(l_cptEndTime, '%d-%m-%Y:%H:%i:%s') and FIND_IN_SET(LANE, l_lane) and lgd.node_id = l_nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.ACTUAL_LOADED_TIME > lgd.CRITICAL_PULL_TIME OR chd.ACTUAL_LOADED_TIME is null)) tab1 left outer join LOADS_REPORT_DATA LRD_OB on LRD_OB.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON tab1.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary tab1.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on tab1.actual_inbound_plan_id = LRD_IB.PLAN_ID;
END//

drop procedure GET_MISSED_CPT_PACKAGES_BY_VRID;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_MISSED_CPT_PACKAGES_BY_VRID`(IN vrid VARCHAR(256), IN nodeId VARCHAR(48))
BEGIN
select CHD.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, LGD.LANE, LGD.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(CHD.ACTUAL_LOADED_TIME <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(CHD.actual_unloaded_time <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, CHD.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, CHD.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, CHD.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select NODE_ID, CARRIER, VEHICLE_RUN_ID, PLAN_ID, SCHEDULED_DEPARTURE_LOCAL_TZ from LOADS_REPORT_DATA where VEHICLE_RUN_ID = vrid and NODE_ID = nodeId and BUSINESS_TYPE = 'OUTBOUND') LRD_OB
join CONTAINER_HISTORY_DATA CHD on LRD_OB.PLAN_ID = CHD.ACTUAL_OUTBOUND_PLAN_ID join LOAD_GROUPS_DATA LGD ON CHD.EXPECTED_LOAD_GROUP_ID = LGD.LOAD_GROUP_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON CHD.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID and binary CHD.CLIENT_CONTAINER_ID = binary CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on CHD.actual_inbound_plan_id = LRD_IB.PLAN_ID WHERE CHD.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') AND CHD.NODE_ID = nodeId and (CHD.ACTUAL_LOADED_TIME > LGD.CRITICAL_PULL_TIME OR CHD.ACTUAL_LOADED_TIME is null);
END//

drop procedure GET_PACKAGE_DETAILS_BY_PACKAGE_ID;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_PACKAGE_DETAILS_BY_PACKAGE_ID`(IN packageID VARCHAR(255), IN nodeId VARCHAR(48))
BEGIN
select CHD.CLIENT_CONTAINER_ID AS SCANNABLE_Id,CMTD.CARRIER_TRACKING_ID, LGD.LANE, LGD.CRITICAL_PULL_TIME_LOCAL_TZ AS CPT, IF(CHD.ACTUAL_LOADED_TIME <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CPT, IF(CHD.actual_unloaded_time <= LGD.CRITICAL_PULL_TIME , 'Yes', 'No') as Met_CET, CMTD.ORIGIN_NODE_ID AS SOURCE_FC,LRD_IB.VEHICLE_RUN_ID AS INBOUND_VEHICLE_RUN, LRD_OB.VEHICLE_RUN_ID AS OUTBOUND_VEHICLE_RUN_ID, LRD_IB.SCHEDULED_ARRIVAL_LOCAL_TZ AS SCHEDULED_ARRIVAL_TIME, CHD.actual_unloaded_time_local_tz as ACTUAL_ARRIVAL_TIME,
LRD_OB.SCHEDULED_DEPARTURE_LOCAL_TZ AS SCHEDULED_DEPARTURE_TIME, CHD.ACTUAL_LOADED_TIME_LOCAL_TZ as ACTUAL_DEPARTURE_TIME, CMTD.PKG_SHIP_METHOD AS SHIP_METHOD, CMTD.PKG_SORT_CODE AS SORT_CODE, CMTD.FULFILLMENT_SHIPMENT_ID AS FULFILLMENT_ID, LRD_IB.CARRIER AS IB_LOAD_CARRIER, LRD_OB.CARRIER AS OB_LOAD_CARRIER, CHD.DEPARTED_TRAILER_ID AS DEPARTED_TRAILER_ID, CMTD.PROMISE_SHIP_DATE AS PROMISE_SHIP_DATE, CMTD.SCHEDULED_SHIP_DATE  AS SCHEDULED_SHIP_DATE, CMTD.ACTUAL_SHIP_DATE AS ACTUAL_SHIP_DATE  from (select * from CONTAINER_HISTORY_DATA where CLIENT_CONTAINER_ID = packageID and NODE_ID = nodeId and CONTAINER_TYPE IN ('PACKAGE', 'TOTE')) CHD join LOAD_GROUPS_DATA LGD ON CHD.EXPECTED_LOAD_GROUP_ID = LGD.LOAD_GROUP_ID left outer join LOADS_REPORT_DATA LRD_OB on LRD_OB.PLAN_ID = CHD.ACTUAL_OUTBOUND_PLAN_ID LEFT OUTER JOIN CONTAINER_METADATA CMTD ON CHD.CLIENT_CONTAINER_ID = CMTD.CONTAINER_ID left outer join LOADS_REPORT_DATA LRD_IB on CHD.actual_inbound_plan_id = LRD_IB.PLAN_ID;
END//

drop procedure GET_PACKAGE_SUMMARY_BY_LANE_AND_CPT;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_PACKAGE_SUMMARY_BY_LANE_AND_CPT`(IN l_lane VARCHAR(4000), IN cptStartTime VARCHAR(19), IN cptEndTime VARCHAR(19), IN nodeId VARCHAR(48))
BEGIN
select TAB_ALL.LANE,
TAB_ALL.CPT,
IFNULL(TAB_ALL.count_all,0) AS TOTAL_PACKAGES,
ROUND(IFNULL(((IFNULL(TAB_ALL.count_all,0) - IFNULL(MISS_CPT_TAB.count_miss_CPT,0))/ TAB_ALL.count_all),0)*100,2) AS Success_Percent,
(IFNULL(TAB_ALL.count_all,0) - IFNULL(MISS_CPT_TAB.count_miss_CPT,0)) AS PACKAGES_MET_CPT,
IFNULL(MISS_CPT_TAB.count_miss_CPT,0) AS PACKAGES_MISSED_CPT,
IFNULL(MISS_CET_TAB.count_miss_CET,0) as PACKAGES_MISS_CET
FROM
(select count(chd.container_id) AS count_all, lgd.LANE, lgd.CRITICAL_PULL_TIME_LOCAL_TZ as CPT from CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and FIND_IN_SET(lgd.LANE, l_lane) and lgd.CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') group by lgd.LANE, lgd.CRITICAL_PULL_TIME_LOCAL_TZ) TAB_ALL left outer join
(select count(chd.container_id) AS count_miss_CPT, lgd.LANE, lgd.CRITICAL_PULL_TIME_LOCAL_TZ as CPT from CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and FIND_IN_SET(lgd.LANE, l_lane) and lgd.CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.ACTUAL_LOADED_TIME > lgd.CRITICAL_PULL_TIME or chd.ACTUAL_LOADED_TIME is null) group by lgd.LANE, lgd.CRITICAL_PULL_TIME_LOCAL_TZ) MISS_CPT_TAB ON TAB_ALL.LANE = MISS_CPT_TAB.LANE and TAB_ALL.CPT = MISS_CPT_TAB.CPT
left outer join
(select count(chd.container_id) AS count_miss_CET, lgd.LANE, lgd.CRITICAL_PULL_TIME_LOCAL_TZ as CPT from CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and FIND_IN_SET(lgd.LANE, l_lane) and lgd.CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.actual_unloaded_time > lgd.CRITICAL_PULL_TIME or chd.actual_unloaded_time is null) group by lgd.LANE, lgd.CRITICAL_PULL_TIME_LOCAL_TZ) MISS_CET_TAB ON TAB_ALL.LANE = MISS_CET_TAB.LANE and TAB_ALL.CPT = MISS_CET_TAB.CPT;
END//

drop procedure GET_PACKAGE_SUMMARY_BY_VRID;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_PACKAGE_SUMMARY_BY_VRID`(IN vrid VARCHAR(256), IN nodeId VARCHAR(48))
BEGIN
select TAB_ALL.LANE,
TAB_ALL.ACTUAL_DEPARTURE_LOCAL_TZ,
TAB_ALL.VEHICLE_RUN_ID,
IFNULL(TAB_ALL.count_all,0) AS TOTAL_PACKAGES,
(IFNULL(TAB_ALL.count_all,0) - IFNULL(MISS_CPT_TAB.count_miss_CPT,0)) AS PACKAGES_MET_CPT,
IFNULL(MISS_CPT_TAB.count_miss_CPT,0) AS PACKAGES_MISSED_CPT,
IFNULL(MISS_CET_TAB.count_miss_CET,0) as PACKAGES_MISS_CET
from
(select count(chd.container_id) AS count_all, lrd.LANE, lrd.VEHICLE_RUN_ID, lrd.ACTUAL_DEPARTURE_LOCAL_TZ from LOADS_REPORT_DATA lrd, CONTAINER_HISTORY_DATA chd where lrd.PLAN_ID = chd.ACTUAL_OUTBOUND_PLAN_ID and lrd.VEHICLE_RUN_ID = vrid and lrd.NODE_ID = nodeId and lrd.BUSINESS_TYPE = 'OUTBOUND' and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE')) TAB_ALL left outer join
(select count(chd.container_id) AS count_miss_CPT, lrd.VEHICLE_RUN_ID  from LOADS_REPORT_DATA lrd, CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where lrd.PLAN_ID = chd.ACTUAL_OUTBOUND_PLAN_ID and chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and lrd.VEHICLE_RUN_ID = vrid and lrd.NODE_ID = nodeId and lrd.BUSINESS_TYPE = 'OUTBOUND' and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.ACTUAL_LOADED_TIME > lgd.CRITICAL_PULL_TIME or chd.ACTUAL_LOADED_TIME is null)) MISS_CPT_TAB ON TAB_ALL.VEHICLE_RUN_ID = MISS_CPT_TAB.VEHICLE_RUN_ID
left outer join
(select count(chd.container_id) AS count_miss_CET, lrd.VEHICLE_RUN_ID  from LOADS_REPORT_DATA lrd, CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where lrd.PLAN_ID = chd.ACTUAL_OUTBOUND_PLAN_ID and chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and lrd.VEHICLE_RUN_ID = vrid and lrd.NODE_ID = nodeId and lrd.BUSINESS_TYPE = 'OUTBOUND' and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.actual_unloaded_time > lgd.CRITICAL_PULL_TIME or chd.actual_unloaded_time is null)) MISS_CET_TAB ON TAB_ALL.VEHICLE_RUN_ID = MISS_CET_TAB.VEHICLE_RUN_ID;
END//

drop procedure GET_VRID_WISE_PACKAGE_SUMMARY_BY_LANE_AND_CPT;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `GET_VRID_WISE_PACKAGE_SUMMARY_BY_LANE_AND_CPT`(IN l_lane VARCHAR(4000), IN cptStartTime VARCHAR(19), IN cptEndTime VARCHAR(19), IN nodeId VARCHAR(48))
BEGIN
select
TAB_ALL.lane as lane,
TAB_ALL.ACTUAL_DEPARTURE_LOCAL_TZ,
TAB_ALL.VEHICLE_RUN_ID,
IFNULL(TAB_ALL.count_all,0) AS TOTAL_PACKAGES,
(IFNULL(TAB_ALL.count_all,0) - IFNULL(MISS_CPT_TAB.count_miss_CPT,0)) AS PACKAGES_MET_CPT,
IFNULL(MISS_CPT_TAB.count_miss_CPT,0) AS PACKAGES_MISSED_CPT,
IFNULL(MISS_CET_TAB.count_miss_CET,0) as PACKAGES_MISS_CET
from
(select count(tab1.container_id) AS count_all, tab1.lane, IFNULL(lrd.VEHICLE_RUN_ID,"NOT DEPARTED"), lrd.ACTUAL_DEPARTURE_LOCAL_TZ from (select chd.container_id, lgd.lane, chd.ACTUAL_OUTBOUND_PLAN_ID from CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and FIND_IN_SET(lgd.LANE, l_lane) and lgd.CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE'))tab1 left outer join LOADS_REPORT_DATA lrd on lrd.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID group by tab1.lane, lrd.VEHICLE_RUN_ID, lrd.ACTUAL_DEPARTURE_LOCAL_TZ) TAB_ALL
left outer join
(select count(tab1.container_id) AS count_miss_CPT, tab1.lane, IFNULL(lrd.VEHICLE_RUN_ID,"NOT DEPARTED"), lrd.ACTUAL_DEPARTURE_LOCAL_TZ from (select chd.container_id, lgd.lane, chd.ACTUAL_OUTBOUND_PLAN_ID from CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and FIND_IN_SET(lgd.LANE, l_lane) and lgd.CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.ACTUAL_LOADED_TIME > lgd.CRITICAL_PULL_TIME or chd.ACTUAL_LOADED_TIME is null) )tab1 left outer join LOADS_REPORT_DATA lrd on lrd.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID group by lrd.VEHICLE_RUN_ID, lrd.ACTUAL_DEPARTURE_LOCAL_TZ) MISS_CPT_TAB ON TAB_ALL.VEHICLE_RUN_ID = MISS_CPT_TAB.VEHICLE_RUN_ID
left outer join
(select count(tab1.container_id) AS count_miss_CET, tab1.lane, IFNULL(lrd.VEHICLE_RUN_ID,"NOT DEPARTED"), lrd.ACTUAL_DEPARTURE_LOCAL_TZ from (select chd.container_id, lgd.lane, chd.ACTUAL_OUTBOUND_PLAN_ID from CONTAINER_HISTORY_DATA chd, LOAD_GROUPS_DATA lgd where chd.EXPECTED_LOAD_GROUP_ID = lgd.LOAD_GROUP_ID and FIND_IN_SET(lgd.LANE, l_lane) and lgd.CRITICAL_PULL_TIME_LOCAL_TZ between STR_TO_DATE(cptStartTime, '%d-%m-%Y:%H:%i:%s') and STR_TO_DATE(cptEndTime, '%d-%m-%Y:%H:%i:%s') and lgd.node_id = nodeId and chd.CONTAINER_TYPE IN ('PACKAGE', 'TOTE') and (chd.actual_unloaded_time > lgd.CRITICAL_PULL_TIME or chd.actual_unloaded_time is null) )tab1 left outer join LOADS_REPORT_DATA lrd on lrd.PLAN_ID = tab1.ACTUAL_OUTBOUND_PLAN_ID group by lrd.VEHICLE_RUN_ID, lrd.ACTUAL_DEPARTURE_LOCAL_TZ) MISS_CET_TAB ON TAB_ALL.VEHICLE_RUN_ID = MISS_CET_TAB.VEHICLE_RUN_ID;
END//

drop procedure INBOUND_LOADS_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `INBOUND_LOADS_MERGER_PROC`(IN i_business_type varchar(48), IN i_node_id varchar(48), IN i_carrier varchar(48), IN i_plan_id varchar(252), IN i_vehicle_run_id varchar(256), IN i_actual_arrival_time DATETIME, IN i_actual_departure_time DATETIME, IN i_lane varchar(255), IN i_scheduled_arrival_time DATETIME, IN i_actual_arrival_time_local_tz DATETIME, IN i_actual_departure_local_tz DATETIME, IN i_scheduled_arrival_local_tz DATETIME, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE LOADS_REPORT_DATA SET business_type=i_business_type, node_id=i_node_id, carrier=i_carrier, vehicle_run_id=i_vehicle_run_id, actual_arrival_time= i_actual_arrival_time, actual_departure_time=i_actual_departure_time, lane=i_lane, scheduled_arrival_time=i_scheduled_arrival_time, actual_arrival_time_local_tz= i_actual_arrival_time_local_tz, actual_departure_local_tz=i_actual_arrival_time_local_tz, scheduled_arrival_local_tz=i_scheduled_arrival_local_tz, last_updated_by = i_last_updated_by WHERE plan_id = i_plan_id;
IF (ROW_COUNT()=0) then
    INSERT INTO LOADS_REPORT_DATA (business_type, node_id, carrier, plan_id, vehicle_run_id, actual_arrival_time, actual_departure_time, lane, scheduled_arrival_time, actual_arrival_time_local_tz, actual_departure_local_tz, scheduled_arrival_local_tz, created_by, last_updated_by) SELECT i_business_type, i_node_id, i_carrier, i_plan_id, i_vehicle_run_id, i_actual_arrival_time, i_actual_departure_time, i_lane, i_scheduled_arrival_time, i_actual_arrival_time_local_tz, i_actual_departure_local_tz, i_scheduled_arrival_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM LOADS_REPORT_DATA WHERE plan_id = i_plan_id);
END IF;
END//

drop procedure LANES_SUMMARY_LOADER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `LANES_SUMMARY_LOADER_PROC`(IN I_LANE VARCHAR(255), IN I_STACKING_FILTER VARCHAR(255), IN I_SORT_CODE VARCHAR(40), IN I_ZIP_CODE VARCHAR(40), IN I_NODE_ID VARCHAR(40), IN I_IS_ACTIVE VARCHAR(1), IN I_created_by VARCHAR(8), IN I_last_updated_by VARCHAR(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE LANE_MAPPINGS_DATA SET IS_ACTIVE = I_IS_ACTIVE WHERE LANE=i_LANE and STACKING_FILTER=i_STACKING_FILTER and SORT_CODE=i_SORT_CODE and ZIP_CODE=i_ZIP_CODE and NODE_ID=i_NODE_ID;
IF (ROW_COUNT()=0) then
    INSERT INTO LANE_MAPPINGS_DATA (LANE_MAPPING_ID, LANE, STACKING_FILTER, SORT_CODE, ZIP_CODE, NODE_ID, IS_ACTIVE, created_by, last_updated_by) SELECT NULL, I_LANE, I_STACKING_FILTER, I_SORT_CODE, I_ZIP_CODE, I_NODE_ID, I_IS_ACTIVE, I_created_by, I_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM LANE_MAPPINGS_DATA WHERE LANE=i_LANE and STACKING_FILTER=i_STACKING_FILTER and SORT_CODE=i_SORT_CODE and ZIP_CODE=i_ZIP_CODE and NODE_ID=i_NODE_ID);
END IF;
END//

drop procedure LOAD_GROUPS_LOADER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `LOAD_GROUPS_LOADER_PROC`(IN i_load_group_id varchar(48), IN i_node_id varchar(48), IN i_lane varchar(255), IN i_critical_pull_time datetime, IN i_critical_pull_time_local_tz datetime, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE LOAD_GROUPS_DATA SET node_id=i_node_id, lane=i_lane, critical_pull_time= i_critical_pull_time, critical_pull_time_local_tz=i_critical_pull_time_local_tz, last_updated_by = i_last_updated_by WHERE load_group_id = i_load_group_id;
IF (ROW_COUNT()=0) then
    INSERT INTO LOAD_GROUPS_DATA (load_group_id, node_id, lane, critical_pull_time, critical_pull_time_local_tz, created_by, last_updated_by) SELECT i_load_group_id, i_node_id, i_lane, i_critical_pull_time, i_critical_pull_time_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM LOAD_GROUPS_DATA WHERE load_group_id = i_load_group_id);
END IF;
END//

drop procedure LOAD_STATUS_MAPPINGS_LOADER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `LOAD_STATUS_MAPPINGS_LOADER_PROC`(IN i_load_status_mapping_id varchar(48), IN i_node_id varchar(48), IN i_load_status_code varchar(48), IN i_plan_id varchar(256), IN i_vehicle_run_id varchar(256), IN i_mapping_timestamp datetime, IN i_mapping_timestamp_local_tz datetime, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE LOAD_STATUS_MAPPINGS_HISTORY SET node_id=i_node_id, load_status_code= i_load_status_code, plan_id=i_plan_id, vehicle_run_id=i_vehicle_run_id, mapping_timestamp=i_mapping_timestamp, mapping_timestamp_local_tz=i_mapping_timestamp_local_tz, last_updated_by = i_last_updated_by WHERE load_status_mapping_id= i_load_status_mapping_id;
IF (ROW_COUNT()=0) then
    INSERT INTO LOAD_STATUS_MAPPINGS_HISTORY (load_status_mapping_id, node_id, load_status_code, plan_id, vehicle_run_id, mapping_timestamp, mapping_timestamp_local_tz, created_by, last_updated_by) SELECT i_load_status_mapping_id, i_node_id, i_load_status_code, i_plan_id, i_vehicle_run_id, i_mapping_timestamp, i_mapping_timestamp_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM LOAD_STATUS_MAPPINGS_HISTORY WHERE load_status_mapping_id = i_load_status_mapping_id);
END IF;
END//

drop procedure LOAD_TRAILER_MAPPINGS_LOADER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `LOAD_TRAILER_MAPPINGS_LOADER_PROC`(IN i_load_trailer_mapping_id varchar(48), IN i_node_id varchar(48), IN i_trailer_id varchar(48), IN i_plan_id varchar(256), IN i_vehicle_run_id varchar(256), IN i_mapping_timestamp datetime, IN i_mapping_timestamp_local_tz datetime, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE LOAD_TRAILER_MAPPINGS_HISTORY SET node_id=i_node_id, trailer_id=i_trailer_id, plan_id=i_plan_id, vehicle_run_id=i_vehicle_run_id, mapping_timestamp=i_mapping_timestamp, mapping_timestamp_local_tz=i_mapping_timestamp_local_tz, last_updated_by = i_last_updated_by WHERE load_trailer_mapping_id = i_load_trailer_mapping_id;
IF (ROW_COUNT()=0) then
    INSERT INTO LOAD_TRAILER_MAPPINGS_HISTORY (load_trailer_mapping_id, node_id, trailer_id, plan_id, vehicle_run_id, mapping_timestamp, mapping_timestamp_local_tz, created_by, last_updated_by) SELECT i_load_trailer_mapping_id, i_node_id, i_trailer_id, i_plan_id, i_vehicle_run_id, i_mapping_timestamp, i_mapping_timestamp_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM LOAD_TRAILER_MAPPINGS_HISTORY WHERE load_trailer_mapping_id = i_load_trailer_mapping_id);
END IF;
END//

drop procedure OUTBOUND_LOADS_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `OUTBOUND_LOADS_MERGER_PROC`(IN i_business_type varchar(48), IN i_node_id varchar(48), IN i_carrier varchar(48), IN i_plan_id varchar(252), IN i_vehicle_run_id varchar(256), IN i_actual_arrival_time DATETIME, IN i_actual_departure_time DATETIME, IN i_lane varchar(255), IN i_scheduled_departure_time DATETIME, IN i_critical_pull_time DATETIME, IN i_load_group_id varchar(48), IN i_actual_arrival_time_local_tz datetime, IN i_actual_departure_local_tz datetime, IN i_scheduled_departure_local_tz datetime, IN i_critical_pull_time_local_tz datetime, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE LOADS_REPORT_DATA SET business_type=i_business_type, node_id=i_node_id, carrier=i_carrier, vehicle_run_id=i_vehicle_run_id, actual_arrival_time=i_actual_arrival_time, actual_departure_time=i_actual_departure_time, lane=i_lane, scheduled_departure_time=i_scheduled_departure_time, critical_pull_time=i_critical_pull_time, load_group_id=i_load_group_id, actual_arrival_time_local_tz=i_actual_arrival_time_local_tz, actual_departure_local_tz=i_actual_departure_local_tz, scheduled_departure_local_tz=i_scheduled_departure_local_tz, critical_pull_time_local_tz=i_critical_pull_time_local_tz, last_updated_by = i_last_updated_by WHERE plan_id = i_plan_id;
IF (ROW_COUNT()=0) then
    INSERT INTO LOADS_REPORT_DATA (business_type, node_id, carrier, plan_id, vehicle_run_id, actual_arrival_time, actual_departure_time, lane, scheduled_departure_time, critical_pull_time, load_group_id, actual_arrival_time_local_tz, actual_departure_local_tz, scheduled_departure_local_tz, critical_pull_time_local_tz, created_by, last_updated_by) SELECT i_business_type, i_node_id, i_carrier, i_plan_id, i_vehicle_run_id, i_actual_arrival_time, i_actual_departure_time, i_lane, i_scheduled_departure_time, i_critical_pull_time, i_load_group_id, i_actual_arrival_time_local_tz, i_actual_departure_local_tz, i_scheduled_departure_local_tz, i_critical_pull_time_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM LOADS_REPORT_DATA WHERE plan_id = i_plan_id);
END IF;
END//

drop procedure SCMS_CPI_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `SCMS_CPI_MERGER_PROC`(IN i_container_id varchar(48), IN i_node_id varchar(48), IN i_expected_load_group_id varchar(100), IN i_container_type varchar(48), IN i_processing_type varchar(48), IN i_client_container_id varchar(48), IN i_scannables varchar(4000), IN i_client_name varchar(48), IN i_container_label varchar(256), IN i_stacking_filter varchar(48), IN i_containerization_hierarchy varchar(2000), IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE CONTAINER_HISTORY_DATA SET node_id= i_node_id, expected_load_group_id=i_expected_load_group_id, container_type=i_container_type, processing_type=i_processing_type, client_container_id = i_client_container_id, scannables = i_scannables, client_name = i_client_name, container_label=i_container_label, stacking_filter=i_stacking_filter, containerization_hierarchy=i_containerization_hierarchy, last_updated_by = i_last_updated_by WHERE CONTAINER_ID = I_CONTAINER_ID;
IF (ROW_COUNT()=0) then
    INSERT INTO CONTAINER_HISTORY_DATA (container_id, node_id, expected_load_group_id, container_type, processing_type, client_container_id, scannables, client_name, container_label, stacking_filter, containerization_hierarchy, created_by, last_updated_by) SELECT i_container_id, i_node_id, i_expected_load_group_id, i_container_type, i_processing_type, i_client_container_id, i_scannables, i_client_name, i_container_label, i_stacking_filter, i_containerization_hierarchy, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM CONTAINER_HISTORY_DATA WHERE container_id = i_container_id);
END IF;
END//

drop procedure SLAM_PACKAGE_PLAN_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `SLAM_PACKAGE_PLAN_MERGER_PROC`(IN I_container_id VARCHAR(48), IN I_carrier_tracking_id VARCHAR(50), IN I_fulfillment_shipment_id decimal(38,0), IN I_package_id DECIMAL(4,0), IN I_customer_shipment_id DECIMAL(38,0), IN I_promise_ship_date DATETIME, IN I_promise_arrival_date DATETIME, IN I_pkg_ship_method VARCHAR(30), IN I_pkg_sort_code VARCHAR(24), IN I_origin_node_id VARCHAR(10), IN I_created_by VARCHAR(8), IN I_last_updated_by VARCHAR(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL;
UPDATE CONTAINER_METADATA SET carrier_tracking_id=I_carrier_tracking_id, fulfillment_shipment_id=I_fulfillment_shipment_id, package_id=I_package_id, customer_shipment_id=I_customer_shipment_id, promise_ship_date=I_promise_ship_date, promise_arrival_date=I_promise_arrival_date, pkg_ship_method=I_pkg_ship_method, pkg_sort_code=I_pkg_sort_code, origin_node_id=I_origin_node_id, last_updated_by=I_last_updated_by WHERE container_id=I_container_id;
IF (ROW_COUNT()=0) THEN
    INSERT INTO CONTAINER_METADATA (container_id, carrier_tracking_id, fulfillment_shipment_id, package_id, customer_shipment_id, promise_ship_date, promise_arrival_date, pkg_ship_method, pkg_sort_code, origin_node_id, created_by, last_updated_by) SELECT I_container_id, I_carrier_tracking_id, I_fulfillment_shipment_id, I_package_id, I_customer_shipment_id, I_promise_ship_date, I_promise_arrival_date, I_pkg_ship_method, I_pkg_sort_code, I_origin_node_id, I_created_by, I_last_updated_by FROM DUAL WHERE NOT EXISTS (SELECT CREATION_DATE FROM CONTAINER_METADATA WHERE CONTAINER_ID = I_CONTAINER_ID);
END IF;
END//

drop procedure TRAILERS_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `TRAILERS_MERGER_PROC`(i_trailer_id varchar(48), i_node_id varchar(48), i_trailer_number varchar(48), i_carrier varchar(48), i_actual_arrival_time datetime, i_actual_departure_time datetime, i_actual_arrival_time_local_tz datetime, i_actual_departure_local_tz datetime, i_created_by varchar(8), i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE TRAILERS_REPORT_DATA SET node_id=i_node_id, trailer_number=i_trailer_number, carrier=i_carrier, actual_arrival_time=i_actual_arrival_time, actual_departure_time=i_actual_departure_time, actual_arrival_time_local_tz=i_actual_arrival_time_local_tz, actual_departure_local_tz=i_actual_departure_local_tz, last_updated_by = i_last_updated_by WHERE trailer_id = i_trailer_id;
IF (ROW_COUNT()=0) then
    INSERT INTO TRAILERS_REPORT_DATA (trailer_id, node_id, trailer_number, carrier, actual_arrival_time, actual_departure_time, actual_arrival_time_local_tz, actual_departure_local_tz, created_by, last_updated_by) SELECT i_trailer_id, i_node_id, i_trailer_number, i_carrier, i_actual_arrival_time, i_actual_departure_time, i_actual_arrival_time_local_tz, i_actual_departure_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM TRAILERS_REPORT_DATA WHERE trailer_id = i_trailer_id);
END IF;
END//

drop procedure TRAILER_STATUS_MAPPINGS_LOADER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `TRAILER_STATUS_MAPPINGS_LOADER_PROC`(IN i_trailer_status_mapping_id varchar(48), IN i_trailer_id varchar(48), IN i_node_id varchar(48), IN i_trailer_status_code varchar(48), IN i_location_code varchar(48), IN i_mapping_timestamp datetime, IN i_mapping_timestamp_local_tz datetime, IN i_created_by varchar(8), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE TRAILER_STATUS_MAPPINGS_HIST SET trailer_id=i_trailer_id, node_id=i_node_id, trailer_status_code=i_trailer_status_code, location_code=i_location_code, mapping_timestamp=i_mapping_timestamp, mapping_timestamp_local_tz=i_mapping_timestamp_local_tz, last_updated_by = i_last_updated_by WHERE trailer_status_mapping_id = i_trailer_status_mapping_id;
IF (ROW_COUNT()=0) then
    INSERT INTO TRAILER_STATUS_MAPPINGS_HIST (trailer_status_mapping_id, trailer_id, node_id, trailer_status_code, location_code, mapping_timestamp, mapping_timestamp_local_tz, created_by, last_updated_by) SELECT i_trailer_status_mapping_id, i_trailer_id, i_node_id, i_trailer_status_code, i_location_code, i_mapping_timestamp, i_mapping_timestamp_local_tz, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM TRAILER_STATUS_MAPPINGS_HIST WHERE trailer_status_mapping_id = i_trailer_status_mapping_id);
END IF;
END//

drop procedure TRANSPORT_CARRIERS_MERGER_PROC;

DELIMITER //
CREATE DEFINER=`transmaster`@`%` PROCEDURE `TRANSPORT_CARRIERS_MERGER_PROC`(IN i_transport_carrier_id bigint(20), IN i_VENDOR_ID decimal(38,0), IN i_SCAC varchar(5), IN i_CARRIER_NAME varchar(100), IN i_PART_OF_PULLDOWN_LIST varchar(1), IN i_LOCAL_CARRIER_NAME varchar(300), IN i_created_by varchar(48), IN i_last_updated_by varchar(8))
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION resignal;
UPDATE TRANSPORT_CARRIERS_DATA SET VENDOR_ID=i_VENDOR_ID, SCAC=i_SCAC, CARRIER_NAME=i_CARRIER_NAME, PART_OF_PULLDOWN_LIST=i_PART_OF_PULLDOWN_LIST, LOCAL_CARRIER_NAME=i_LOCAL_CARRIER_NAME, last_updated_by = i_last_updated_by WHERE transport_carrier_id = i_transport_carrier_id;
IF (ROW_COUNT()=0) then
    INSERT INTO TRANSPORT_CARRIERS_DATA (transport_carrier_id, VENDOR_ID, SCAC, CARRIER_NAME, PART_OF_PULLDOWN_LIST, LOCAL_CARRIER_NAME, created_by, last_updated_by) SELECT i_transport_carrier_id, i_VENDOR_ID, i_SCAC, i_CARRIER_NAME, i_PART_OF_PULLDOWN_LIST, i_LOCAL_CARRIER_NAME, i_created_by, i_last_updated_by FROM dual WHERE NOT EXISTS (SELECT creation_date FROM TRANSPORT_CARRIERS_DATA WHERE transport_carrier_id = i_transport_carrier_id);
END IF;
END//


